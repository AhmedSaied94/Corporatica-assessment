name: CI/CD AWS
# deploy
on:
  push:
    branches: [ production ]

env:
  PROD_IMAGE: corparatica/flask-corporatica-app
  DOMAIN: corporatica-app.com
  ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
  BUILD_ID: ${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}

jobs:
  build:
    name: Build PRODUCTION
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production'
    steps:
      - name: Cleanup packages
        uses: smartsquaregmbh/delete-old-packages@v0.6.0
        with:
          names: |
            flask-corporatica-app
      - name: Checkout master
        uses: actions/checkout@v1

      - name: Add environment variables to .env
        run: |
          echo DEBUG=1 >> .env
          echo SQLALCHEMY_DATABASE_URI=${{ secrets.SQLALCHEMY_DATABASE_URI }} >> .env
          echo SQLALCHEMY_TRACK_MODIFICATIONS=${{ secrets.SQLALCHEMY_TRACK_MODIFICATIONS }} >> .env
          echo DOMAIN=${{ env.DOMAIN }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env



      - name: Set environment variables
        run: |
          echo ::set-env name=PROD_IMAGE::${{ env.PROD_IMAGE }}


      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}


      - name: Pull images
        run: |
          docker pull ${{ env.PROD_IMAGE }}


      - name: Build images
        run: |
          docker build -t ${{ env.PROD_IMAGE }} .
      - name: Push images
        run: |
          docker push ${{ env.PROD_IMAGE }}
  deploy:
    name: Deploy PRODUCTION
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/production'
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y.%m.%d')"
      - name: Add environment variables to .env
        run: |
          echo DEBUG=1 >> .env
          echo SQLALCHEMY_DATABASE_URI=${{ secrets.SQLALCHEMY_DATABASE_URI }} >> .env
          echo SQLALCHEMY_TRACK_MODIFICATIONS=${{ secrets.SQLALCHEMY_TRACK_MODIFICATIONS }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo PROD_IMAGE=${{ env.PROD_IMAGE }} >> .env
          echo DOMAIN=${{ env.DOMAIN }} >> .env
          echo VERSION="v${{ steps.date.outputs.date }}" >> .env
          echo NGINX_CONF_PATH=${{ secrets.NGINX_CONF_PATH }} >> .env
          echo NGINX_CERT_PATH_VAR=${{ secrets.NGINX_CERT_PATH_VAR }} >> .env
          echo NGINX_CERT_PATH_ETC=${{ secrets.NGINX_CERT_PATH_ETC }} >> .env
          echo UPLOADS_PATH=${{ secrets.UPLOADS_PATH }} >> .env
          echo ENV_NAME=prod >> .env
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/dev.key
          chmod 600 ~/.ssh/dev.key
          cat >>~/.ssh/config <<END
          Host staging
            HostName ${{ secrets.INSTANCE_IP }}
            User ${{ secrets.INSTANCE_USER }}
            IdentityFile ~/.ssh/dev.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.INSTANCE_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.INSTANCE_IP }}
      - name: Build and deploy images
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp -i ~/.ssh/dev.key  -o StrictHostKeyChecking=no -r ./.env ./docker-compose.yml ${{ secrets.INSTANCE_USER }}@${{ secrets.INSTANCE_IP }}:${{ secrets.DEPLOY_PATH }}
          ssh -i ~/.ssh/dev.key -o StrictHostKeyChecking=no ${{ secrets.INSTANCE_USER }}@${{ secrets.INSTANCE_IP}} << 'ENDSSH'
            cd ${{ secrets.DEPLOY_PATH }}
            source .env
            git switch production
            git pull
            docker system prune -f
            docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASS }}
            docker pull ${{ env.PROD_IMAGE }}
            docker compose -f nginx/docker-compose.yml up -d --renew-anon-volumes
            docker compose -f docker-compose.yml up -d --renew-anon-volumes
          ENDSSH
